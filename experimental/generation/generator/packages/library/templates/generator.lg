> This file contains language independent templates to help with the generation process

>> Miscellaneous

> TODO: Remove this when EOL is part of expressions, then it will be os specific as opposed to windows specifice.
# EOL()
-\r\n

>> Root directories for different kinds of assets
> These match composer structure
# generationDir()
- language-generation/

# understandingDir()
- language-understanding/

# knowledgeDir()
- knowledge-base/

# recognizerDir()
- recognizers/

# dialogDir()
- dialogs/

>> Filenames and Paths

# propertyFilename()
- ${generationDir()}${locale}/${property}/${prefix}-${property}.${locale}.lg

# entityLGFilename()
- ${generationDir()}${locale}/${property}/${prefix}-${property}Entity.${locale}.lg

# entityLUFilename()
- ${understandingDir()}${locale}/${property}/${prefix}-${property}-${property}Entity.${locale}.lu

# missingFilename()
- ${dialogDir()}${property}/${prefix}-${property}-missing.dialog

# helpFilename()
- ${dialogDir()}${property}/${prefix}-${property}-help.dialog

# builtinEntityFilename(entity)
- ${understandingDir()}${locale}/${property}/${prefix}-${property}-${entity}.${locale}.lu

# addFilename(entity)
- ${dialogDir()}${property}/${prefix}-${property}-add-${entity}.dialog

# removeFilename(entity)
- ${dialogDir()}${property}/${prefix}-${property}-remove-${entity}.dialog

# clearFilename()
- ${dialogDir()}${property}/${prefix}-${property}-clear.dialog

# showFilename()
- ${dialogDir()}${property}/${prefix}-${property}-show.dialog

# changeFilename()
- ${dialogDir()}${property}/${prefix}-${property}-change.dialog

# chooseEntityFilename()
- ${dialogDir()}${property}/${prefix}-${property}Entity-choose.dialog

# formDialogFilename(name)
- ${dialogDir()}form/${prefix}-form-${name}

# formImport(name)
- [${prefix}-${name}](../form/${prefix}-${name})

# localePath(path)
- ${join(subArray(split(path, '/'), count(split(path, '/')) - 2, count(split(path, '/'))), '/')}

> This is useful when importing another .lg file in order to add prefix/locale
# importLG(name)
-[${name}](${prefix}-${name}.${locale}.lg)

>> Template lists

# propertyTemplates()
- ${[`${type}Property.lg`, `${type}-missing.dialog`, `${type}-help.dialog`, `${type}-clear.dialog`, `${type}-show.dialog`, `${type}-change.dialog`]}

# entityTemplates()
- ${[`${entity}Entity.lu`, `${entity}Entity.lg`, `${entity}Entity-add-${type}.dialog`, `${entity}Entity-remove-${type}.dialog`]}

# propertyLGTemplates(type)
- ${`${locale}/${type}Property.${locale}.lg`}

# entityLUTemplates(entity)
- ${`${locale}/${entity}Entity.${locale}.lu`}

# entityLGTemplates(entity)
- ${`${locale}/${entity}Entity.${locale}.lg`}

# formTemplates(name, type)
- ${`${locale}/form-${name}.${locale}${type}`}

>> Dialog templates
# addDialog(entity)
-```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnAssignEntity",
    "operation": "Add()",
    "property": "${property}",
    "entity": "${entity}",
    "actions": [
        {
            "$kind": "Microsoft.SendActivity",
            "activity": "\${confirmationText('${property}', @${entity})}"
        },
        {
            "$kind": "Microsoft.SetProperty",
            "property": "$${property}",
            "value": "=@${entity}"          
        },
        {
            "$kind": "Microsoft.IfCondition",
            "condition": "$PropertyToChange == '${property}'",
            "actions": [
                {
                    "$kind":"Microsoft.DeleteProperty",
                    "property": "$PropertyToChange"
                }
            ]
        }
    ]               
    ${designerOpEntity('Add', entity)}      
}
```

# addDialogWithStringPattern(entity)
- ```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnAssignEntity",
    "operation": "Add()",
    "property": "${property}",
    "entity": "${entity}",
    "actions": [
        {
            "$kind": "Microsoft.IfCondition",
            "condition":"not(isMatch( @${entity},  dialogClass.schema.properties['${property}'].pattern))",
            "actions":[
                {
                    "$kind": "Microsoft.SendActivity",
                    "activity": "\${${property}_NoPatternMatch(@${entity})}"
                }                    
            ],
            "elseActions":[
                {
                    "$kind": "Microsoft.SendActivity",
                    "activity": "\${confirmationText('${property}',  @${entity})}"
                },
                {
                    "$kind": "Microsoft.SetProperty",
                    "property": "$${property}",
                    "value": "= @${entity}"          
                },
                {
                    "$kind": "Microsoft.IfCondition",
                    "condition": "$PropertyToChange == '${property}'",
                    "actions": [
                        {
                            "$kind":"Microsoft.DeleteProperty",
                            "property": "$PropertyToChange"
                        }
                    ]
                }
            ]
        }
    ]               
    ${designerOpEntity('Add', entity)}     
}
```

# addDialogWithNumberMinMax(entity)
- ```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnAssignEntity",
    "operation": "Add()",
    "property": "${property}",
    "entity": "${entity}",
    "actions": [
        {
            "$kind": "Microsoft.IfCondition",
            "condition":"@${entity} < dialogClass.schema.properties['${property}'].minimum",
            "actions":[
                {
                    "$kind": "Microsoft.SendActivity",
                    "activity": "\${${property}_IsTooSmall(@${entity})}"
                }                    
            ],
            "elseActions":[
                {
                    "$kind": "Microsoft.IfCondition",
                    "condition":"@${entity} > dialogClass.schema.properties['${property}'].maximum",
                    "actions":[
                        {
                            "$kind": "Microsoft.SendActivity",
                            "activity": "\${${property}_IsTooBig(@${entity})}"
                        }                    
                    ],
                    "elseActions": [
                        {
                            "$kind": "Microsoft.SendActivity",
                            "activity": "\${confirmationText('${property}',  @${entity})}"
                        },
                        {
                            "$kind": "Microsoft.SetProperty",
                            "property": "$${property}",
                            "value": "= @${entity}"          
                        },
                        {
                            "$kind": "Microsoft.IfCondition",
                            "condition": "$PropertyToChange == '${property}'",
                            "actions": [
                                {
                                    "$kind":"Microsoft.DeleteProperty",
                                    "property": "$PropertyToChange"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]               
    ${designerOpEntity('Add', entity)}     
}
```

# addArrayDialog(entity)
-```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnAssignEntity",
    "operation": "Add()",
    "property": "${property}",
    "entity": "${entity}",
    "actions": [
        {
            "$kind": "Microsoft.SendActivity",
            "activity": "\${confirmationText('${property}',  @${entity})}"
        },
        {
            "$kind": "Microsoft.EditArray",
            "changeType": "push",
            "itemsProperty": "$${property}",
            "value": "=@${entity}"
        },
        {
            "$kind": "Microsoft.IfCondition",
            "condition": "$PropertyToChange == '${property}'",
            "actions": [
                {
                    "$kind":"Microsoft.DeleteProperty",
                    "property": "$PropertyToChange"
                }
            ]
        }
    ]               
    ${designerOpEntity('Add', entity)}     
}
```

# addArrayDialogWithChecking(entity)
-```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnAssignEntity",
    "operation": "Add()",
    "property": "${property}",
    "entity": "${entity}",
    "actions": [
        {
            "$kind": "Microsoft.IfCondition",
            "condition": "!contains($${property}, @${entity})",
            "actions": [
                {
                    "$kind": "Microsoft.SendActivity",
                    "activity": "\${confirmationText('${property}',  @${entity})}"
                },
                {
                    "$kind": "Microsoft.EditArray",
                    "changeType": "push",
                    "itemsProperty": "$${property}",
                    "value": "=@${entity}"
                }
            ],
            "elseActions": [
                {
                    "$kind": "Microsoft.SendActivity",
                    "activity": "\${alreadyExistsText(${property},  @${entity})}"
                }
            ]
        },
        {
            "$kind": "Microsoft.IfCondition",
            "condition": "$PropertyToChange == '${property}'",
            "actions": [
                {
                    "$kind": "Microsoft.DeleteProperty",
                    "property": "$PropertyToChange"
                }
            ]
        }
    ]               
    ${designerOpEntity('Add', entity)
    }
}
```

# addWithUnits(entity)
- IF: ${hasUnits()}
    -```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnAssignEntity",
    "operation": "Add()",
    "property": "${property}",
    "entity": "${entity}",
    "actions": [
        {
            "$kind": "Microsoft.IfCondition",
            "condition": "@${entity}.units == '${units()}'",
            "actions":[
                {
                    "$kind": "Microsoft.SendActivity",
                    "activity": "\${confirmationText('${property}', @${entity})}"
                }, 
                {
                    "$kind": "Microsoft.SetProperty",
                    "property": "$${property}",
                    "value": "=@${entity}"          
                },
                {
                    "$kind": "Microsoft.IfCondition",
                    "condition": "$PropertyToChange == '${property}'",
                    "actions": [
                        {
                            "$kind":"Microsoft.DeleteProperty",
                            "property": "$PropertyToChange"
                        }
                    ]
                }
            ],
            "elseActions":[
                {
                    "$kind": "Microsoft.SendActivity",
                    "activity": "\${${property}_IncorrectUnits(@${entity}.units)}"
                }
            ]
        }
    ]
    ${designerOpEntity('Add', entity)}             
}
```
- ELSE:
    - ```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnAssignEntity",
    "operation": "Add()",
    "property": "${property}",
    "entity": "${entity}",
    "actions": [
        {
            "$kind": "Microsoft.SendActivity",
            "activity": "\${confirmationText('${property}', @${entity})}"
        }, 
        {
            "$kind": "Microsoft.SetProperty",
            "property": "$${property}",
            "value": "=@${entity}"          
        },
        {
            "$kind": "Microsoft.IfCondition",
            "condition": "$PropertyToChange == '${property}'",
            "actions": [
                {
                    "$kind":"Microsoft.DeleteProperty",
                    "property": "$PropertyToChange"
                }
            ]
        }
    ]
    ${designerOpEntity('Add', entity)}             
}
```

# addNumberWithUnits
-```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnAssignEntity",
    "operation": "Add()",
    "property": "${property}",
    "entity": "number",
    "actions": [
        {
            "$kind": "Microsoft.SendActivity",
            "activity": "\${confirmUpdate('${property}', {number: @number, units: '${units()}'})}"
        }, 
        {
            "$kind": "Microsoft.SetProperty",
            "property": "$${property}",
            "value": "={number: @number, units: '${units()}'}"          
        },
        {
            "$kind": "Microsoft.IfCondition",
            "condition": "$PropertyToChange == '${property}'",
            "actions": [
                {
                    "$kind":"Microsoft.DeleteProperty",
                    "property": "$PropertyToChange"
                }
            ]
        }
    ]
    ${designerOpEntity('Add', 'number with units')}             
}
```

# removeDialog(entity)
-```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnAssignEntity",
    "operation": "Remove()",
    "property": "${property}",
    "entity": "${entity}",
    "actions": [
        {
            "$kind": "Microsoft.IfCondition",
            "condition":"$${property} == @${entity}",
            "actions": [
                {
                    "$kind": "Microsoft.SendActivity",
                    "activity": "\${${property}_RemoveConfirmation(@${entity})}}"
                },  
                {
                    "$kind": "Microsoft.DeleteProperty",
                    "property": "$${property}"
                }
            ]
        }
    ]               
    ${designerOpEntity('Remove', entity)}     
}
```

# removeArrayDialog(entity)
-```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnAssignEntity",
    "operation": "Remove()",
    "property": "${property}",
    "entity": "${entity}",
    "actions": [
        {
            "$kind": "Microsoft.SendActivity",
            "activity": "\${${property}_RemoveConfirmation(@${entity})}"
        },
        {
            "$kind": "Microsoft.EditArray",
            "changeType": "remove",
            "itemsProperty": "$${property}",
            "value": "=@${entity}"
        }
    ]               
    ${designerOpEntity('Remove', entity)}     
}
```

# clearDialog()
-```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnAssignEntity",
    "operation": "Clear()",
    "property": "${property}",
    "actions": [
        {
            "$kind": "Microsoft.SendActivity",
            "activity": "\${${property}_ClearConfirmation()}"
        },
        {
            "$kind": "Microsoft.DeleteProperty",
            "property": "$${property}"
        }
    ]               
    ${designerOp('Clear')}     
}
```

# showDialog()
-```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnAssignEntity",
    "operation": "Show()",
    "property": "${property}",
    "actions": [
        {
            "$kind": "Microsoft.SendActivity",
            "activity": "\${${property}_Show()}"
        }
    ]               
    ${designerOp('Show')}     
}
```

# missingDialog()
- ```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnEndOfActions",
    "condition":"!\$${property}",
    "priority": "=form.missingPriority(['${property}'])",
    "actions": [
        {
            "$kind": "Microsoft.Ask",
            "activity": "\${${property}_MissingPrompt()}",
            "expectedProperties": [
                "${property}"
            ]
        }
    ]
    ${designerMissing(property)}
}
```

# helpPropertyDialog()
- ```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnAssignEntity",
    "operation": "Help()",
    "property": "${property}",
    "actions": [
        {
            "$kind": "Microsoft.SendActivity",
            "activity": "\${${property}_Help()}"
        }
    ]
    
    ${designerHelp(property)}
}
```

# changeDialog()
- ```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnEndOfActions",
    "condition":"$PropertyToChange == '${property}'",
    "priority": 1,
    "actions": [
        {
            "$kind": "Microsoft.Ask",
            "activity": "\${${property}_ChangePrompt()}",
            "expectedProperties": [
                "${property}"
            ]
        }
    ]
    ${designerChange(property)}
}
```

>> *** LU Generation

# operations(entity, values, label)
- IF: ${examples}
- ${generateOperations(entity, examples, label)}
- ELSEIF: ${values}
- ${generateOperations(entity, values, label)}
- ELSE:
- ${generateOperations(entity, [`**${entity}1**`, `**${entity}2**`, `**${entity}3**`], label)}

> Each entity is either ambiguous, i.e. found in multiple properties or not.
> 1) For ambiguous entities, generate standalone entities and operators with a mix of standalone labeled entities and properties with entity and property name.
> 2) For unique entities, standalone properties around entity and operators with properties.
> 
> We control the utterances through populating substitution variables which can either be a single
> value or an array of choices.  If a variable is not present the whole utterance will be dropped.  
> Variables:
> simple: top level labeled/unlabled standalone ambiguous entity, i.e. 3 or {@entity=foo}
> value: labeled ambiguous entity for inside property/op like {@entity=value}
> unique: labeled unique entity always found inside of property, i.e. {@entity=value} or {@entity=3}
> uniqueOrValue: union of unique and value.
> name: possible ways of naming property
> property: current property
> entity: current entity
> isArray: true if property supports multiple values
> comment: empty value to filter out meta-comments
> TODO: Would be nice to be able to have multi-line object here for clarity
# generateOperations(entity, values, label)
-```
> Define phrase list for ${property} property.
@ phraselist ${property}Phrases(interchangeable)=
${if(schema.properties[property].title,
    `    - ${schema.properties[property].title}`,
     synonyms(property))}

> Define property entity and optional value for ${property} property.
@ ml ${propertyEntity()} usesFeature ${property}Phrases
    - @ ${entity} ${entity}

> Define operations on '${property}' property.
${defineOperation('Add', entity)}
${defineOperation('Remove', entity)}
${defineOperation('Clear', entity)}
${defineOperation('Change', entity)}
${defineOperation('Show', entity)}
${defineOperation('Help', entity)}
> TODO: dummyProperty are to work around an issue in 4.11 of the SDK they can be removed on the next release
@ ml Skip() usesFeature SkipPhrases
    - @ ml dummyProperty
@ ml Cancel() usesFeature CancelPhrases
    - @ ml dummyProperty

> Add examples for operations on the '${property}' property to the intent '${triggerIntent}'.
${'#'} ${triggerIntent}
${substitutions(
    `form-operations.${locale}.data`, 
    { utterances: utterances, simple: entityList(entity, values, label), value: valueList(entity, values), unique: uniqueList(entity, values), uniqueOrValue: uniqueOrValueList(entity, values), name: propertyList(property), property: propertyEntity(), entity: entity, isArray: isArrayProperty(property), comment: []},
    5)}
```

# defineOperation(operation, entity)
-```@ ml ${operation}() usesFeature ${operation}Phrases
    -@ ml ${propertyEntity()} usesFeature ${propertyEntity()}
        - @ ${entity} ${entity}
${if(length(entities[entity]) > 1, `    - @ ${entity} ${entity}`, '')}```

> Name for property entity
# propertyEntity()
- ${`${property}Property`}

> Check to see if entity is only found in one property
# oneProperty(entity)
- ${count(entities[entity]) == 1}

> Test to see if property is an array
# isArrayProperty(property)
- ${schema.properties[property].type == 'array'}

> Generate a raw entity value with optional label
# entityValue(entity, value, label)
- IF: ${label}
- {@${entity}=${value}}
- ELSE:
- ${value}

> List of primitive entities
# entityList(entity, values, label)
- IF: ${!oneProperty(entity)}
- ${foreach(values, value, entityValue(entity, value, label))}
- ELSE:
- ${[]}

> List of labeled multi-property values
# valueList(entity, values)
- IF: ${!oneProperty(entity)}
- ${foreach(values, value, `{@${entity}=${value}}`)}
- ELSE:
- ${[]}

> List of labeled single-property labeled values
# uniqueList(entity, values)
- IF: ${oneProperty(entity)}
- ${foreach(values, value, `{@${entity}=${value}}`)}
- ELSE:
- ${[]}

> Union of single and multiple property labled entities
# uniqueOrValueList(entity, values)
- ${union(uniqueList(entity, values), valueList(entity, values))}

# propertyList(property)
- ${foreach(phrases(property), phrase, `${phrase}`)}

# synonyms(value)
- ${join(foreach(phrases(value), phrase, `        - ${phrase}`), EOL())}

# luHeader()
-```
> !# @app.culture = ${locale}
> !# @app.settings.NormalizeWordForm = true
> !# @app.settings.UseAllTrainingData = true
```

>> Templates to use when expanding schemas

> Operations defined in .lu
# schemaOperations()
- ${['Add()', 'Remove()', 'Clear()', 'Show()', 'Help()', 'Change()', 'Skip()', 'Cancel()']}

> Define default operation for properties
# schemaDefaultOperation()
- ${{"": {"": "Add()"}}}

> Designer information
# designerName(name)
-, "$designer": {"name": "${name}"}

# designerOp(op)
- ${designerName(`${property} - ${op}()`)}

# designerOpEntity(op, entity)
- ${designerOpEntityProperty(op, entity, property)}

# designerOpEntityProperty(op, entity, property)
- ${designerName(`${property} - ${op}(@${entity})`)}

# designerChooseEntity()
- ${designerName(`${property}Entity - Choose()`)}

# designerChooseProperty()
- ${designerName(`ChooseProperty()`)}

# designerMissing(property)
- ${designerName(`${property} - Missing()`)}

# designerHelp(property)
- ${designerName(`${property} - Help()`)}

# designerChange(property)
- ${designerName(`${property} - Change()`)}

# designerIntent(intent)
- ${designerName(`On${intent}`)}

> Per-property LG templates

> TODO: Comments have been moved inside of templates until Composer supports them before
# promptTemplates(missing, change)
- ```
>> Prompts

${'#'} ${property}_MissingPrompt
> Prompt when '${property}' property is missing
- ${missing}

${'#'} ${property}_ChangePrompt
> Prompt when '${property}' property has a value, but is being changed
- ${change}```

# confirmationTemplates(expectedSet, expectedReplace, unexpectedSet, unexpectedReplace, remove, clear)
- ```
>> Confirmation

${'#'} ${property}_ExpectedSetConfirmation(newVal)
> Confirmation when adding expected value to empty '${property}' property
- ${expectedSet}

${'#'} ${property}_ExpectedUpdateConfirmation(newVal)
> Confirmation when replacing expected value in '${property}' property
- ${expectedReplace}

${'#'} ${property}_UnexpectedSetConfirmation(newVal)
> Confirmation when adding unexpected value to empty '${property}' property
- ${unexpectedSet}

${'#'} ${property}_UnexpectedUpdateConfirmation(newVal)
> Confirmation when replacing unexpected value in '${property}' property
- ${unexpectedReplace}

${'#'} ${property}_RemoveConfirmation(val)
> Confirmation when value is removed from '${property}' property
- ${remove}

${'#'} ${property}_ClearConfirmation
> Confirmation when '${property}' property is cleared
- ${clear}```

# helpTemplates(reprompt, help)
- ```
>> Help

${'#'} ${property}_RepromptHelp
> Help for '${property}' property reprompt
- ${reprompt}

${'#'} ${property}_Help
> Help for '${property}' property
- ${help}```

# showTemplate(show)
- ```
>> Show
${'#'} ${property}_Show
> Show value of '${property}' property
- ${show}```

# incorrectUnitsTemplate
- IF: ${hasUnits()}
- ```
${'#'} ${property}_IncorrectUnits(actual)
> Incorrect units for '${property}' property
- \${actual} must be '${units()}'```
- ELSE:
    -

>> Helpers

# hasUnits
- ${schema.properties[property].$units != null}

# units
- ${schema.properties[property].$units}